Index: src/Menus/MenuAdmin.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Menus;\r\n\r\nimport models.ArrayList.AdministradorList;\r\nimport models.Herramienta.HerramientaElectrica;\r\nimport models.Producto;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.Map;\r\n\r\nimport static json.JsonProductos.serializarProductos;\r\n\r\npublic class MenuAdmin extends JFrame {\r\n    private AdministradorList administrador = new AdministradorList();\r\n    private boolean ventanaProductos = false;\r\n\r\n    public MenuAdmin(AdministradorList administrador) throws HeadlessException {\r\n        this.administrador = administrador;\r\n\r\n        setTitle(\"Mercado Libre Administrador\");\r\n        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\r\n        setSize(650,400);\r\n        setLayout(new BorderLayout());\r\n        setVisible(true);\r\n        setLocationRelativeTo(null);\r\n        setResizable(false);\r\n\r\n        // Panel vacío para la región WEST\r\n        JPanel panelVacioOeste = new JPanel();\r\n        panelVacioOeste.setPreferredSize(new Dimension(50, 300)); // Ancho de 150px\r\n        add(panelVacioOeste, BorderLayout.WEST);\r\n\r\n        // Panel vacío para la región EAST\r\n        JPanel panelVacioEste = new JPanel();\r\n        panelVacioEste.setPreferredSize(new Dimension(50, 300)); // Ancho de 150px\r\n        add(panelVacioEste, BorderLayout.EAST);\r\n\r\n        // Panel vacío para la región SOUTH\r\n\r\n        JPanel panelVacioSur = new JPanel();\r\n        panelVacioSur.setPreferredSize(new Dimension(650, 30));\r\n        add(panelVacioSur, BorderLayout.SOUTH);\r\n\r\n\r\n        JLabel titulo = new JLabel(\"Menu Administrador\", JLabel.CENTER);\r\n        titulo.setFont(new Font(\"Arial\", Font.BOLD, 30));\r\n        add(titulo, BorderLayout.NORTH);\r\n\r\n\r\n        JPanel panelBotones = new JPanel();\r\n        panelBotones.setLayout(new GridLayout(4,1,10,20));\r\n\r\n        JButton btnVerProductos = new JButton(\"Ver Productos\");\r\n        btnVerProductos.addActionListener(e -> verProductos());\r\n\r\n        JButton btnConsultar = new JButton(\"Consultar\");\r\n        //btnConsultar.addActionListener(new ActionListener() {});\r\n\r\n        JButton btnAgregar = new JButton(\"Agregar Producto\");\r\n        btnAgregar.addActionListener(e -> agregarProducto1());\r\n\r\n        JButton btnEditar = new JButton(\"Editar Producto\");\r\n        //btnEditar.addActionListener(new ActionListener() {});\r\n\r\n        panelBotones.add(btnVerProductos);\r\n        panelBotones.add(btnConsultar);\r\n        panelBotones.add(btnAgregar);\r\n        panelBotones.add(btnEditar);\r\n\r\n        add(panelBotones, BorderLayout.CENTER);\r\n\r\n    }\r\n\r\n    private <T extends Producto> void verProductos(){\r\n\r\n        if (ventanaProductos){\r\n            JOptionPane.showMessageDialog(null, \"La ventana ya esta abierta\");\r\n            return;\r\n        }\r\n\r\n        JFrame frame = new JFrame(\"Lista de Productos\");\r\n        frame.setSize(650,600);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\r\n        frame.setLayout(new BorderLayout());\r\n        frame.setVisible(true);\r\n//        frame.setResizable(false);\r\n\r\n        // Panel vacío para la región WEST\r\n        JPanel panelVacioOeste = new JPanel();\r\n        panelVacioOeste.setPreferredSize(new Dimension(50, 600)); // Ancho de 150px\r\n        frame.add(panelVacioOeste, BorderLayout.WEST);\r\n\r\n        // Panel vacío para la región EAST\r\n        JPanel panelVacioEste = new JPanel();\r\n        panelVacioEste.setPreferredSize(new Dimension(50, 600)); // Ancho de 150px\r\n        frame.add(panelVacioEste, BorderLayout.EAST);\r\n\r\n        // Panel vacío para la región SOUTH\r\n\r\n        JPanel panelVacioSur = new JPanel();\r\n        panelVacioSur.setPreferredSize(new Dimension(650, 30));\r\n        frame.add(panelVacioSur, BorderLayout.SOUTH);\r\n\r\n        JPanel panelBotones = new JPanel();\r\n        panelBotones.setLayout(new GridLayout(administrador.size(),1,30,20));\r\n\r\n        JScrollPane scrollPane = new JScrollPane(panelBotones);\r\n        frame.add(scrollPane, BorderLayout.CENTER);\r\n\r\n        if (administrador.getProductos().isEmpty()){\r\n\r\n            JButton mensajeVacio = new JButton(\"No hay existencia de productos\");\r\n            mensajeVacio.setFont(new Font(\"Arial\", Font.BOLD, 30));\r\n            mensajeVacio.setEnabled(false);\r\n            panelBotones.add(mensajeVacio);\r\n        }else {\r\n            administrador.recorrerAdmin(panelBotones);\r\n        }\r\n\r\n        ventanaProductos = true;\r\n\r\n        frame.addWindowListener(new java.awt.event.WindowAdapter() {\r\n            @Override\r\n            public void windowClosing(java.awt.event.WindowEvent windowEvent) {\r\n                // Cuando se cierre la ventana, actualizar la variable booleana\r\n                ventanaProductos = false;\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n\r\n    private void agregarProducto(){\r\n        JFrame frame = new JFrame(\"Agregar Producto\");\r\n        frame.setSize(650,600);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\r\n        frame.setLayout(new BorderLayout());\r\n        frame.setVisible(true);\r\n\r\n        JPanel panelVacioOeste = new JPanel();\r\n        panelVacioOeste.setPreferredSize(new Dimension(50, 600));\r\n        frame.add(panelVacioOeste, BorderLayout.WEST);\r\n\r\n        JPanel panelVacioEste = new JPanel();\r\n        panelVacioEste.setPreferredSize(new Dimension(50, 600));\r\n        frame.add(panelVacioEste, BorderLayout.EAST);\r\n\r\n        JPanel panelVacioSur = new JPanel();\r\n        panelVacioSur.setPreferredSize(new Dimension(650, 30));\r\n        frame.add(panelVacioSur, BorderLayout.SOUTH);\r\n\r\n        JPanel panelBotones = new JPanel();\r\n        panelBotones.setLayout(new GridLayout(6,1,30,20));\r\n        frame.add(panelBotones, BorderLayout.CENTER);\r\n\r\n        JLabel titulo = new JLabel(\"Seleccione categoria\", JLabel.CENTER);\r\n        panelBotones.add(titulo);\r\n\r\n        JButton herramientas = new JButton(\"Herramientas\");\r\n        herramientas.addActionListener(e -> agregarHerramienta());\r\n        panelBotones.add(herramientas);\r\n\r\n        JButton hogar = new JButton(\"Hogar\");\r\n        panelBotones.add(hogar);\r\n\r\n        JButton Juguetes = new JButton(\"Juguetes\");\r\n        panelBotones.add(Juguetes);\r\n\r\n        JButton ropa = new JButton(\"Ropa\");\r\n        panelBotones.add(ropa);\r\n\r\n        JButton tecnologia = new JButton(\"Tecnología\");\r\n        panelBotones.add(tecnologia);\r\n\r\n    }\r\n\r\n    private void agregarProducto1(){\r\n        String[] nombresClases = {\"Herramienta Electrica\", \"Herramienta Manual\", \"Insumo\",\r\n        \"Bazar\", \"Escritorio\", \"Mueble\", \"Sillon\",\r\n        \"Juego De Mesa\", \"Juguete Electrico\", \"Juguete Manual\",\r\n        \"Buzo\", \"Calzado\", \"Pantalon\", \"Remera\",\r\n        \"Celular\", \"Computadora\", \"PC de escritorio\", \"Portatil\", \"Televisor\"};\r\n        JComboBox<String> comboBox = new JComboBox<>(nombresClases);\r\n\r\n        int result = JOptionPane.showConfirmDialog(this, comboBox, \"Seleccionar clase\", JOptionPane.OK_CANCEL_OPTION);\r\n\r\n        if (result == JOptionPane.OK_OPTION){\r\n            String claseSeleccionado = comboBox.getSelectedItem().toString();\r\n            JFrame frame = new JFrame(\"Crear Producto\");\r\n            frame.setSize(650,600);\r\n            frame.setLocationRelativeTo(null);\r\n            frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\r\n            frame.setLayout(new BorderLayout());\r\n            frame.setVisible(true);\r\n\r\n            JPanel panelVacioOeste = new JPanel();\r\n            panelVacioOeste.setPreferredSize(new Dimension(50, 600));\r\n            frame.add(panelVacioOeste, BorderLayout.WEST);\r\n\r\n            JPanel panelVacioEste = new JPanel();\r\n            panelVacioEste.setPreferredSize(new Dimension(50, 600));\r\n            frame.add(panelVacioEste, BorderLayout.EAST);\r\n\r\n            JPanel panelVacioSur = new JPanel();\r\n            panelVacioSur.setPreferredSize(new Dimension(650, 30));\r\n            frame.add(panelVacioSur, BorderLayout.SOUTH);\r\n\r\n            JPanel panelBotones = new JPanel();\r\n            panelBotones.setLayout(new GridLayout(10,1,30,20));\r\n            frame.add(panelBotones, BorderLayout.CENTER);\r\n\r\n            JLabel nombre = new JLabel(\"Nombre\");\r\n            panelBotones.add(nombre);\r\n\r\n            JTextField nombreTexto = new JTextField();\r\n            panelBotones.add(nombreTexto);\r\n\r\n            JLabel stock = new JLabel(\"Stock\");\r\n            panelBotones.add(stock);\r\n\r\n            JTextField stockTexto = new JTextField();\r\n            panelBotones.add(stockTexto);\r\n\r\n            JLabel precio = new JLabel(\"Precio\");\r\n            panelBotones.add(precio);\r\n\r\n            JTextField precioTexto = new JTextField();\r\n            panelBotones.add(precioTexto);\r\n\r\n            JLabel marca  = new JLabel(\"Marca\");\r\n            panelBotones.add(marca);\r\n\r\n            JTextField marcaTexto = new JTextField();\r\n            panelBotones.add(marcaTexto);\r\n\r\n            JLabel modelo = new JLabel(\"Modelo\");\r\n            panelBotones.add(modelo);\r\n\r\n            JTextField modeloTexto = new JTextField();\r\n            panelBotones.add(modeloTexto);\r\n\r\n\r\n\r\n\r\n\r\n            switch (claseSeleccionado){\r\n                case \"Herramienta Electrica\"-> {\r\n                    final boolean[] esInalambrico = {false};\r\n                    JLabel voltaje = new JLabel(\"Voltaje\");\r\n                    panelBotones.add(voltaje);\r\n\r\n                    JTextField voltajeTexto = new JTextField();\r\n                    panelBotones.add(voltajeTexto);\r\n\r\n                    JButton inalambrico = new JButton(\"Inalambrico\");\r\n                    inalambrico.addActionListener(e-> esInalambrico[0] = true);\r\n                    panelBotones.add(inalambrico);\r\n\r\n                    JButton guardar = new JButton(\"Guardar\");\r\n                    panelBotones.add(guardar);\r\n                    guardar.addActionListener(e ->{\r\n                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||\r\n                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||\r\n                                modeloTexto.getText().isEmpty() || voltajeTexto.getText().isEmpty()) {\r\n                            JOptionPane.showMessageDialog(frame, \"Todos los campos son obligatorios.\", \"Error\", JOptionPane.WARNING_MESSAGE);\r\n                            return;\r\n                        }\r\n                        try{\r\n                            HerramientaElectrica hE = new HerramientaElectrica(\r\n                                    nombreTexto.getText(),\r\n                                    \"codigornd\",\r\n                                    Integer.parseInt(stockTexto.getText()),\r\n                                    Double.parseDouble(precioTexto.getText()),\r\n                                    marcaTexto.getText(),\r\n                                    modeloTexto.getText(),\r\n                                    Float.parseFloat(voltajeTexto.getText()),\r\n                                    esInalambrico[0]);\r\n                            administrador.add(hE);\r\n                            serializarProductos(administrador);\r\n                            JOptionPane.showMessageDialog(frame, \"Producto guardado exitosamente\");\r\n                            frame.dispose();\r\n                        }catch (NumberFormatException ex){\r\n                            JOptionPane.showMessageDialog(frame, \"Datos inválidos. Intente nuevamente\", \"Error\", JOptionPane.ERROR_MESSAGE);\r\n                        }\r\n                    });\r\n\r\n\r\n\r\n                }\r\n                case \"Herramienta Manual\"-> {}\r\n                case \"Insumo\"-> {}\r\n                case \"Bazar\"-> {}\r\n                case \"Escritorio\"-> {}\r\n                case \"Mueble\"-> {}\r\n                case \"Sillon\"-> {}\r\n                case \"Juguetes\"-> {}\r\n                case \"Juguete Electrico\"-> {}\r\n                case \"Juguete Manual\"-> {}\r\n                case \"Buzo\"-> {}\r\n                case \"Calzado\"-> {}\r\n                case \"Pantalon\"-> {}\r\n                case \"Remera\"-> {}\r\n                case \"Celular\"-> {}\r\n                case \"Computadora\"-> {}\r\n                case \"PC de escritorio\"-> {}\r\n                case \"Portatil\"-> {}\r\n                case \"Televisor\"-> {}\r\n\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n    private void agregarHerramienta(){\r\n        JFrame frame = new JFrame(\"Seleccione tipo\");\r\n        frame.setSize(350,300);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\r\n        frame.setLayout(new BorderLayout());\r\n        frame.setVisible(true);\r\n\r\n        JPanel panelVacioOeste = new JPanel();\r\n        panelVacioOeste.setPreferredSize(new Dimension(50, 300));\r\n        frame.add(panelVacioOeste, BorderLayout.WEST);\r\n\r\n        JPanel panelVacioEste = new JPanel();\r\n        panelVacioEste.setPreferredSize(new Dimension(50, 300));\r\n        frame.add(panelVacioEste, BorderLayout.EAST);\r\n\r\n        JPanel panelVacioSur = new JPanel();\r\n        panelVacioSur.setPreferredSize(new Dimension(350, 30));\r\n        frame.add(panelVacioSur, BorderLayout.SOUTH);\r\n\r\n        JPanel panelBotones = new JPanel();\r\n        panelBotones.setLayout(new GridLayout(3,1,30,20));\r\n        frame.add(panelBotones, BorderLayout.CENTER);\r\n\r\n        JButton electrica = new JButton(\"Electrica\");\r\n        electrica.addActionListener(e->crearProducto(\"Electrica\"));\r\n        panelBotones.add(electrica);\r\n\r\n        JButton manual = new JButton(\"Manual\");\r\n        panelBotones.add(manual);\r\n\r\n        JButton insumo = new JButton(\"Insumo\");\r\n        panelBotones.add(insumo);\r\n\r\n\r\n\r\n    }\r\n\r\n    private void crearProducto(String tipo){\r\n        JFrame frame = new JFrame(\"Crear Producto\");\r\n        frame.setSize(650,600);\r\n        frame.setLocationRelativeTo(null);\r\n        frame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);\r\n        frame.setLayout(new BorderLayout());\r\n        frame.setVisible(true);\r\n\r\n        JPanel panelVacioOeste = new JPanel();\r\n        panelVacioOeste.setPreferredSize(new Dimension(50, 600));\r\n        frame.add(panelVacioOeste, BorderLayout.WEST);\r\n\r\n        JPanel panelVacioEste = new JPanel();\r\n        panelVacioEste.setPreferredSize(new Dimension(50, 600));\r\n        frame.add(panelVacioEste, BorderLayout.EAST);\r\n\r\n        JPanel panelVacioSur = new JPanel();\r\n        panelVacioSur.setPreferredSize(new Dimension(650, 30));\r\n        frame.add(panelVacioSur, BorderLayout.SOUTH);\r\n\r\n        JPanel panelBotones = new JPanel();\r\n        panelBotones.setLayout(new GridLayout(10,1,30,20));\r\n        frame.add(panelBotones, BorderLayout.CENTER);\r\n\r\n        JLabel nombre = new JLabel(\"Nombre\");\r\n        panelBotones.add(nombre);\r\n\r\n        JTextField nombreTexto = new JTextField();\r\n        panelBotones.add(nombreTexto);\r\n\r\n        JLabel stock = new JLabel(\"Stock\");\r\n        panelBotones.add(stock);\r\n\r\n        JTextField stockTexto = new JTextField();\r\n        panelBotones.add(stockTexto);\r\n\r\n        JLabel precio = new JLabel(\"Precio\");\r\n        panelBotones.add(precio);\r\n\r\n        JTextField precioTexto = new JTextField();\r\n        panelBotones.add(precioTexto);\r\n\r\n        JLabel marca  = new JLabel(\"Marca\");\r\n        panelBotones.add(marca);\r\n\r\n        JTextField marcaTexto = new JTextField();\r\n        panelBotones.add(marcaTexto);\r\n\r\n        JLabel modelo = new JLabel(\"Modelo\");\r\n        panelBotones.add(modelo);\r\n\r\n        JTextField modeloTexto = new JTextField();\r\n        panelBotones.add(modeloTexto);\r\n\r\n\r\n\r\n\r\n\r\n        switch (tipo){\r\n            case \"Electrica\"-> {\r\n                String esIn;\r\n                JLabel voltaje = new JLabel(\"Voltaje\");\r\n                panelBotones.add(voltaje);\r\n\r\n                JTextField voltajeTexto = new JTextField();\r\n                panelBotones.add(voltajeTexto);\r\n\r\n                JButton inalambrico = new JButton(\"Inalambrico\");\r\n\r\n\r\n                HerramientaElectrica hE = new HerramientaElectrica(\r\n                        nombreTexto.getText(),\r\n                        \"codigornd\",\r\n                        Integer.parseInt(stockTexto.getText()),\r\n                        Double.parseDouble(precioTexto.getText()),\r\n                        marcaTexto.getText(),\r\n                        modeloTexto.getText(),\r\n                        Float.parseFloat(voltajeTexto.getText()),\r\n                        true);\r\n\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Menus/MenuAdmin.java b/src/Menus/MenuAdmin.java
--- a/src/Menus/MenuAdmin.java	(revision 592417969ff10c041f6f377141c9480a18eaa378)
+++ b/src/Menus/MenuAdmin.java	(date 1732489018190)
@@ -1,14 +1,19 @@
 package Menus;
 
+import enums.*;
 import models.ArrayList.AdministradorList;
 import models.Herramienta.HerramientaElectrica;
+import models.Herramienta.HerramientaManual;
+import models.Herramienta.Insumo;
+import models.Hogar.Bazar;
+import models.Hogar.Escritorio;
+import models.Hogar.Sillon;
+import models.Juguete.JugueteElectrico;
+import models.Juguete.JugueteManual;
 import models.Producto;
 
 import javax.swing.*;
 import java.awt.*;
-import java.awt.event.ActionEvent;
-import java.awt.event.ActionListener;
-import java.util.Map;
 
 import static json.JsonProductos.serializarProductos;
 
@@ -180,7 +185,7 @@
 
     private void agregarProducto1(){
         String[] nombresClases = {"Herramienta Electrica", "Herramienta Manual", "Insumo",
-        "Bazar", "Escritorio", "Mueble", "Sillon",
+        "Bazar", "Escritorio", "Sillon",
         "Juego De Mesa", "Juguete Electrico", "Juguete Manual",
         "Buzo", "Calzado", "Pantalon", "Remera",
         "Celular", "Computadora", "PC de escritorio", "Portatil", "Televisor"};
@@ -210,7 +215,7 @@
             frame.add(panelVacioSur, BorderLayout.SOUTH);
 
             JPanel panelBotones = new JPanel();
-            panelBotones.setLayout(new GridLayout(10,1,30,20));
+            panelBotones.setLayout(new GridLayout(14,1,30,20));
             frame.add(panelBotones, BorderLayout.CENTER);
 
             JLabel nombre = new JLabel("Nombre");
@@ -291,16 +296,546 @@
 
 
                 }
-                case "Herramienta Manual"-> {}
-                case "Insumo"-> {}
-                case "Bazar"-> {}
-                case "Escritorio"-> {}
-                case "Mueble"-> {}
-                case "Sillon"-> {}
-                case "Juguetes"-> {}
-                case "Juguete Electrico"-> {}
-                case "Juguete Manual"-> {}
-                case "Buzo"-> {}
+                case "Herramienta Manual"-> {
+                    JLabel uso = new JLabel("Uso");
+                    panelBotones.add(uso);
+
+                    JComboBox<CategoriasHerramientas> comboBox1 = new JComboBox<>(new CategoriasHerramientas[]{CategoriasHerramientas.CORTAR,
+                            CategoriasHerramientas.TALADRAR,
+                            CategoriasHerramientas.SUJETAR,
+                            CategoriasHerramientas.MEDIR,
+                            CategoriasHerramientas.GOLPEAR,
+                            CategoriasHerramientas.ATORNILLAR,
+                            CategoriasHerramientas.AJUSTAR,
+                            CategoriasHerramientas.LIMAR,
+                            CategoriasHerramientas.PULIR});
+                    panelBotones.add(comboBox1);
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                                modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null) {
+                            JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                            return;
+                        }
+                        try{
+                            HerramientaManual hM = new HerramientaManual(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    (CategoriasHerramientas) comboBox1.getSelectedItem());
+                            administrador.add(hM);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        }catch (NumberFormatException ex){
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+                }
+                case "Insumo"-> {
+                    JLabel tipoDeMaterial = new JLabel("Tipo de Material");
+                    panelBotones.add(tipoDeMaterial);
+
+                    JComboBox<MaterialInsumo> comboBox1 = new JComboBox<>(new MaterialInsumo[]{MaterialInsumo.MADERA,
+                            MaterialInsumo.METAL,
+                            MaterialInsumo.PLASTICO,
+                            MaterialInsumo.CONCRETO,
+                            MaterialInsumo.VIDRIO,
+                            MaterialInsumo.CERAMICA,
+                            MaterialInsumo.YESO});
+                    panelBotones.add(comboBox1);
+
+                    JLabel largo = new JLabel("Largo");
+                    panelBotones.add(largo);
+
+                    JTextField largoTexto = new JTextField();
+                    panelBotones.add(largoTexto);
+
+                    JLabel ancho = new JLabel("Ancho");
+                    panelBotones.add(ancho);
+
+                    JTextField anchoTexto = new JTextField();
+                    panelBotones.add(anchoTexto);
+
+
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                                modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null) {
+                            JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                            return;
+                        }
+                        try{
+                            Insumo insumo = new Insumo(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    (MaterialInsumo) comboBox1.getSelectedItem(), Float.parseFloat(largoTexto.getText()), Float.parseFloat(anchoTexto.getText()), 0);
+                            administrador.add(insumo);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        }catch (NumberFormatException ex){
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+                }
+                case "Bazar"-> {
+                    final boolean[] resistCalor = {false};
+
+                    JLabel categoria = new JLabel("Categoria");
+                    panelBotones.add(categoria);
+                    JComboBox<CategoriasHogar> combobox = new JComboBox<>(new CategoriasHogar[]{CategoriasHogar.COCINA,
+                            CategoriasHogar.BAÑO,
+                            CategoriasHogar.JARDIN,
+                            CategoriasHogar.LAVANDERIA,
+                            CategoriasHogar.ELECTRODOMESTICOS,
+                            CategoriasHogar.DECORACION,
+                            });
+                    panelBotones.add(combobox);
+
+                    JLabel uso = new JLabel("Uso");
+                    panelBotones.add(uso);
+                    JComboBox<UsoHogar> comboBox1 = new JComboBox<>(new UsoHogar[]{UsoHogar.DECORACION,
+                            UsoHogar.COMER,
+                            UsoHogar.LIMPIAR,
+                            UsoHogar.COCINAR,
+                            UsoHogar.LAVAR,
+                            UsoHogar.ORGANIZAR,
+                            UsoHogar.ALMACENAR,
+                            UsoHogar.CUIDADO_HOGAR,
+                            UsoHogar.CUIDADO_PERSONAL,
+                            UsoHogar.OTRO});
+                    panelBotones.add(comboBox1);
+
+
+                    JLabel material = new JLabel("Material");
+                    panelBotones.add(material);
+
+                    JTextField materialTexto = new JTextField();
+                    panelBotones.add(materialTexto);
+
+                    JLabel tamanio = new JLabel("Tamaño");
+                    panelBotones.add(tamanio);
+
+                    JComboBox<TamañoBazar> comboBox2 = new JComboBox<>(new TamañoBazar[]{TamañoBazar.PEQUEÑO,
+                            TamañoBazar.GRANDE,
+                    TamañoBazar.MEDIANO,
+                    TamañoBazar.HONDO,
+                    TamañoBazar.LLANO});
+                    panelBotones.add(comboBox2);
+
+                    JButton resistenteAlCalor = new JButton("Resistente al calor");
+                    resistenteAlCalor.setBackground(Color.RED);
+                    resistenteAlCalor.addActionListener(e->{
+                        resistCalor[0] = !resistCalor[0];
+                        if (resistCalor[0]){
+                            resistenteAlCalor.setBackground(Color.GREEN);
+                        }else {
+                            resistenteAlCalor.setBackground(Color.RED);
+                        }
+                        });
+
+                        panelBotones.add(resistenteAlCalor);
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                                modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null) {
+                            JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                            return;
+                        }
+                        try{
+                            Bazar insumo = new Bazar(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    (CategoriasHogar) combobox.getSelectedItem(),
+                                    (UsoHogar) comboBox1.getSelectedItem(),
+                                    materialTexto.getText(),
+                                    (TamañoBazar) comboBox2.getSelectedItem(),
+                                    resistCalor[0]);
+
+                            administrador.add(insumo);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        }catch (NumberFormatException ex){
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+                }
+                case "Escritorio"-> {
+                    final boolean[] cajones = {false};
+
+                    JLabel categoria = new JLabel("Categoria");
+                    panelBotones.add(categoria);
+                    JComboBox<CategoriasHogar> combobox = new JComboBox<>(new CategoriasHogar[]{CategoriasHogar.COCINA,
+                            CategoriasHogar.BAÑO,
+                            CategoriasHogar.JARDIN,
+                            CategoriasHogar.LAVANDERIA,
+                            CategoriasHogar.ELECTRODOMESTICOS,
+                            CategoriasHogar.DECORACION,
+                    });
+                    panelBotones.add(combobox);
+
+                    JLabel uso = new JLabel("Uso");
+                    panelBotones.add(uso);
+                    JComboBox<UsoHogar> comboBox1 = new JComboBox<>(new UsoHogar[]{UsoHogar.DECORACION,
+                            UsoHogar.COMER,
+                            UsoHogar.LIMPIAR,
+                            UsoHogar.COCINAR,
+                            UsoHogar.LAVAR,
+                            UsoHogar.ORGANIZAR,
+                            UsoHogar.ALMACENAR,
+                            UsoHogar.CUIDADO_HOGAR,
+                            UsoHogar.CUIDADO_PERSONAL,
+                            UsoHogar.OTRO});
+                    panelBotones.add(comboBox1);
+
+
+                    JLabel material = new JLabel("Material");
+                    panelBotones.add(material);
+
+                    JTextField materialTexto = new JTextField();
+                    panelBotones.add(materialTexto);
+
+                    JLabel numeroDePuertas = new JLabel("Capacidad");
+                    panelBotones.add(numeroDePuertas);
+
+                    JTextField capacidad = new JTextField();
+                    panelBotones.add(capacidad);
+
+                    JLabel estilo = new JLabel("Estilo");
+                    panelBotones.add(estilo);
+
+                    JComboBox<EstiloMueble> comboBox2 = new JComboBox<>(new EstiloMueble[]{EstiloMueble.OFICINA
+                            ,EstiloMueble.SALA
+                            ,EstiloMueble.LIVING});
+                    panelBotones.add(comboBox2);
+
+                    JButton tieneCajones = new JButton("Tiene cajones");
+                    tieneCajones.setBackground(Color.RED);
+                    tieneCajones.addActionListener(e->{
+                        cajones[0] = !cajones[0];
+                        if (cajones[0]){
+                            tieneCajones.setBackground(Color.GREEN);
+                        }else {
+                            tieneCajones.setBackground(Color.RED);
+                        }
+                    });
+                    panelBotones.add(tieneCajones);
+
+
+
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                    if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                            precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                            modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null || comboBox.getSelectedItem()==null || comboBox2.getSelectedItem()==null) {
+                        JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                        return;
+                    }
+                        try {
+                            Escritorio escritorio = new Escritorio(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    (CategoriasHogar) combobox.getSelectedItem(),
+                                    (UsoHogar) comboBox1.getSelectedItem(),
+                                    materialTexto.getText(),
+                                    Integer.parseInt(capacidad.getText()),
+                                    (EstiloMueble) comboBox2.getSelectedItem(),
+                                    1,
+                                    cajones[0]);
+                            administrador.add(escritorio);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        } catch (NumberFormatException ex) {
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+
+
+
+
+
+                }
+                case "Sillon"-> {
+                    JLabel categoria = new JLabel("Categoria");
+                    panelBotones.add(categoria);
+                    JComboBox<CategoriasHogar> combobox = new JComboBox<>(new CategoriasHogar[]{CategoriasHogar.COCINA,
+                            CategoriasHogar.BAÑO,
+                            CategoriasHogar.JARDIN,
+                            CategoriasHogar.LAVANDERIA,
+                            CategoriasHogar.ELECTRODOMESTICOS,
+                            CategoriasHogar.DECORACION,
+                    });
+                    panelBotones.add(combobox);
+
+                    JLabel uso = new JLabel("Uso");
+                    panelBotones.add(uso);
+                    JComboBox<UsoHogar> comboBox1 = new JComboBox<>(new UsoHogar[]{UsoHogar.DECORACION,
+                            UsoHogar.COMER,
+                            UsoHogar.LIMPIAR,
+                            UsoHogar.COCINAR,
+                            UsoHogar.LAVAR,
+                            UsoHogar.ORGANIZAR,
+                            UsoHogar.ALMACENAR,
+                            UsoHogar.CUIDADO_HOGAR,
+                            UsoHogar.CUIDADO_PERSONAL,
+                            UsoHogar.OTRO});
+                    panelBotones.add(comboBox1);
+
+
+                    JLabel material = new JLabel("Material");
+                    panelBotones.add(material);
+
+                    JTextField materialTexto = new JTextField();
+                    panelBotones.add(materialTexto);
+
+                    JLabel numeroDePuertas = new JLabel("Capacidad");
+                    panelBotones.add(numeroDePuertas);
+
+                    JTextField capacidad = new JTextField();
+                    panelBotones.add(capacidad);
+
+                    JLabel estilo = new JLabel("Estilo");
+                    panelBotones.add(estilo);
+
+                    JComboBox<EstiloMueble> comboBox2 = new JComboBox<>(new EstiloMueble[]{EstiloMueble.OFICINA
+                            ,EstiloMueble.SALA
+                            ,EstiloMueble.LIVING});
+                    panelBotones.add(comboBox2);
+
+                    JLabel ancho = new JLabel("Ancho");
+                    panelBotones.add(ancho);
+
+                    JTextField anchoTexto = new JTextField();
+                    panelBotones.add(anchoTexto);
+
+                    JLabel alto = new JLabel("Alto");
+                    panelBotones.add(alto);
+
+                    JTextField altoTexto = new JTextField();
+                    panelBotones.add(altoTexto);
+
+                    JLabel color = new JLabel("Color");
+                    panelBotones.add(color);
+
+                    JTextField colorTexto = new JTextField();
+                    panelBotones.add(colorTexto);
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                                modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null ||
+                                comboBox.getSelectedItem()==null || comboBox2.getSelectedItem()==null||
+                                anchoTexto.getText().isEmpty() || altoTexto.getText().isEmpty() ||
+                                colorTexto.getText().isEmpty()) {
+                            JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                            return;
+                        }
+                        try{
+                            Sillon sillon = new Sillon(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    (CategoriasHogar) combobox.getSelectedItem(),
+                                    (UsoHogar) comboBox1.getSelectedItem(),
+                                    materialTexto.getText(),
+                                    Integer.parseInt(capacidad.getText()),
+                                    (EstiloMueble) comboBox2.getSelectedItem(),
+                                    Float.parseFloat(anchoTexto.getText()),
+                                    Float.parseFloat(altoTexto.getText()),
+                                    colorTexto.getText());
+                            administrador.add(sillon);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        }catch (NumberFormatException ex){
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+
+                }
+                case "Juguete Electrico"-> {
+                    JLabel edad = new JLabel("Edad");
+                    panelBotones.add(edad);
+
+                    JTextField edadTexto = new JTextField();
+                    panelBotones.add(edadTexto);
+
+                    JLabel categoria = new JLabel("Categoria");
+                    panelBotones.add(categoria);
+
+                    JComboBox<CategoriaJuguete> comboBox1 = new JComboBox<>(new CategoriaJuguete[]{CategoriaJuguete.EDUCATIVO,
+                            CategoriaJuguete.CONSTRUCCION,
+                            CategoriaJuguete.PELUCHES,
+                            CategoriaJuguete.VEHICULOS,
+                            CategoriaJuguete.DEPORTIVO,
+                            CategoriaJuguete.MUÑECAS,
+                            CategoriaJuguete.MUSICAL,
+                            CategoriaJuguete.JUEGOS_DE_MESA});
+                    panelBotones.add(comboBox1);
+
+                    JLabel material = new JLabel("Material");
+                    panelBotones.add(material);
+
+                    JComboBox<MaterialJuguete> comboBox2 = new JComboBox<>(new MaterialJuguete[]{MaterialJuguete.MADERA,
+                            MaterialJuguete.METAL,
+                            MaterialJuguete.PLASTICO,
+                            MaterialJuguete.TELA,
+                            MaterialJuguete.GOMA,
+                            MaterialJuguete.CARTON,
+                            MaterialJuguete.PAPEL,
+                            MaterialJuguete.ESPUMA});
+                    panelBotones.add(comboBox2);
+
+                    JLabel pilas = new JLabel("Pilas");
+                    panelBotones.add(pilas);
+
+                    JTextField pilasTexto = new JTextField();
+                    panelBotones.add(pilasTexto);
+
+                    JLabel voltaje = new JLabel("Voltaje");
+                    panelBotones.add(voltaje);
+
+                    JTextField voltajeTexto = new JTextField();
+                    panelBotones.add(voltajeTexto);
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                                modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null ||
+                                comboBox.getSelectedItem()==null || comboBox2.getSelectedItem()==null ||
+                                pilasTexto.getText().isEmpty() || voltajeTexto.getText().isEmpty() ||
+                                edadTexto.getText().isEmpty()) {
+                            JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                            return;
+                        }
+                        try{
+                            JugueteElectrico jugueteElectrico = new JugueteElectrico(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    Integer.parseInt(edadTexto.getText()),
+                                    (CategoriaJuguete) comboBox1.getSelectedItem(),
+                                    (MaterialJuguete) comboBox2.getSelectedItem(),
+                                    Integer.parseInt(pilasTexto.getText()),
+                                    Float.parseFloat(voltajeTexto.getText()));
+                            administrador.add(jugueteElectrico);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        }catch (NumberFormatException ex){
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+                }
+                case "Juguete Manual"-> {
+                    JLabel edad = new JLabel("Edad");
+                    panelBotones.add(edad);
+
+                    JTextField edadTexto = new JTextField();
+                    panelBotones.add(edadTexto);
+
+                    JLabel categoria = new JLabel("Categoria");
+                    panelBotones.add(categoria);
+
+                    JComboBox<CategoriaJuguete> comboBox1 = new JComboBox<>(new CategoriaJuguete[]{CategoriaJuguete.EDUCATIVO,
+                            CategoriaJuguete.CONSTRUCCION,
+                            CategoriaJuguete.PELUCHES,
+                            CategoriaJuguete.VEHICULOS,
+                            CategoriaJuguete.DEPORTIVO,
+                            CategoriaJuguete.MUÑECAS,
+                            CategoriaJuguete.MUSICAL,
+                            CategoriaJuguete.JUEGOS_DE_MESA});
+                    panelBotones.add(comboBox1);
+
+                    JLabel material = new JLabel("Material");
+                    panelBotones.add(material);
+
+                    JComboBox<MaterialJuguete> comboBox2 = new JComboBox<>(new MaterialJuguete[]{MaterialJuguete.MADERA,
+                            MaterialJuguete.METAL,
+                            MaterialJuguete.PLASTICO,
+                            MaterialJuguete.TELA,
+                            MaterialJuguete.GOMA,
+                            MaterialJuguete.CARTON,
+                            MaterialJuguete.PAPEL,
+                            MaterialJuguete.ESPUMA});
+                    panelBotones.add(comboBox2);
+
+                    JButton guardar = new JButton("Guardar");
+                    panelBotones.add(guardar);
+                    guardar.addActionListener(e ->{
+                        if (nombreTexto.getText().isEmpty() || stockTexto.getText().isEmpty() ||
+                                precioTexto.getText().isEmpty() || marcaTexto.getText().isEmpty() ||
+                                modeloTexto.getText().isEmpty() || comboBox1.getSelectedItem()==null ||
+                                comboBox.getSelectedItem()==null || comboBox2.getSelectedItem()==null ||
+                                edadTexto.getText().isEmpty()) {
+                            JOptionPane.showMessageDialog(frame, "Todos los campos son obligatorios.", "Error", JOptionPane.WARNING_MESSAGE);
+                            return;
+                        }
+                        try{
+                            JugueteManual jugueteManual = new JugueteManual(
+                                    nombreTexto.getText(),
+                                    "codigornd",
+                                    Integer.parseInt(stockTexto.getText()),
+                                    Double.parseDouble(precioTexto.getText()),
+                                    marcaTexto.getText(),
+                                    modeloTexto.getText(),
+                                    Integer.parseInt(edadTexto.getText()),
+                                    (CategoriaJuguete) comboBox1.getSelectedItem(),
+                                    (MaterialJuguete) comboBox2.getSelectedItem()
+                                    );
+                            administrador.add(jugueteManual);
+                            serializarProductos(administrador);
+                            JOptionPane.showMessageDialog(frame, "Producto guardado exitosamente");
+                            frame.dispose();
+                        }catch (NumberFormatException ex){
+                            JOptionPane.showMessageDialog(frame, "Datos inválidos. Intente nuevamente", "Error", JOptionPane.ERROR_MESSAGE);
+                        }
+                    });
+
+
+                }
+                case "Buzo"-> {
+
+                }
                 case "Calzado"-> {}
                 case "Pantalon"-> {}
                 case "Remera"-> {}
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ea5c9efd-c51d-4304-a23c-1178363bef58\" name=\"Changes\" comment=\"Manu 21-11-24 version 2\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/productos.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/productos.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/Menus/MenuAdmin.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/Menus/MenuAdmin.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;kingrichard11&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/keilaayelen/MercadoLibre.git&quot;,\r\n    &quot;accountId&quot;: &quot;8691a52d-771b-4a6e-a14e-82aaadb316c3&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 5\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nS85N8zgy1l4f9cbdOkRPq2VHa\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Application.Main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/PC/Desktop/tpFinal&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\richa\\OneDrive\\Escritorio\\TP FINAL\\MercadoLibre\\src\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration default=\"true\" type=\"JetRunConfigurationType\">\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"KotlinStandaloneScriptRunConfigurationType\">\r\n      <option name=\"filePath\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ea5c9efd-c51d-4304-a23c-1178363bef58\" name=\"Changes\" comment=\"\" />\r\n      <created>1728954932833</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728954932833</updated>\r\n      <workItem from=\"1729332301815\" duration=\"2847000\" />\r\n      <workItem from=\"1732218013240\" duration=\"13443000\" />\r\n      <workItem from=\"1732294975009\" duration=\"3695000\" />\r\n      <workItem from=\"1732364591468\" duration=\"5524000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Manu 20-11-24\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732114418025</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732114418025</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Manu 21-11-24\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1732223856665</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1732223856665</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"workspace\" />\r\n    <MESSAGE value=\"Manu 20-11-24\" />\r\n    <MESSAGE value=\"Manu 21-11-24\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Manu 21-11-24\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 592417969ff10c041f6f377141c9480a18eaa378)
+++ b/.idea/workspace.xml	(date 1732481751237)
@@ -52,7 +52,7 @@
     &quot;git-widget-placeholder&quot;: &quot;main&quot;,
     &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,
     &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
-    &quot;last_opened_file_path&quot;: &quot;C:/Users/PC/Desktop/tpFinal&quot;,
+    &quot;last_opened_file_path&quot;: &quot;C:/Users/Gamer/Desktop/MercadoLibre/MercadoLibre&quot;,
     &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
     &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
     &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
Index: productos.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"nombresProductos\" : [ \"Cortador de Placas\", \"Desarmador de Precisión\", \"Apple Razer Book 13\", \"Bote de Juguete con Control Remoto\", \"Maraca\", \"wew\" ],\r\n  \"productos\" : [ {\r\n    \"@class\" : \"models.Herramienta.HerramientaManual\",\r\n    \"id\" : \"7def4d26-475d-4811-beb3-f5a889b5c516\",\r\n    \"cdp\" : null,\r\n    \"nombre\" : \"Cortador de Placas\",\r\n    \"stock\" : 224,\r\n    \"precio\" : 178.53501892089844,\r\n    \"marca\" : \"Black & Decker\",\r\n    \"modelo\" : \"DCH172X1\",\r\n    \"categorias\" : \"ATORNILLAR\"\r\n  }, {\r\n    \"@class\" : \"models.Herramienta.HerramientaManual\",\r\n    \"id\" : \"6fa97102-72d6-4ec6-a060-eec9aa17b7d0\",\r\n    \"cdp\" : null,\r\n    \"nombre\" : \"Desarmador de Precisión\",\r\n    \"stock\" : 709,\r\n    \"precio\" : 530.6550903320312,\r\n    \"marca\" : \"Makita\",\r\n    \"modelo\" : \"DWP611\",\r\n    \"categorias\" : \"GOLPEAR\"\r\n  }, {\r\n    \"@class\" : \"models.Tecnologia.Portatil\",\r\n    \"id\" : \"ae91b99f-888e-4527-82a4-3690d2c6b7cc\",\r\n    \"cdp\" : null,\r\n    \"nombre\" : \"Apple Razer Book 13\",\r\n    \"stock\" : 70,\r\n    \"precio\" : 1166015.2244764292,\r\n    \"marca\" : \"Apple\",\r\n    \"modelo\" : \"Razer Book 13\",\r\n    \"peso\" : 3.7418053,\r\n    \"color\" : \"Violeta\",\r\n    \"anio\" : 2022,\r\n    \"so\" : \"WINDOWS\",\r\n    \"procesador\" : \"AMD Ryzen 9 5900X\",\r\n    \"ram\" : 17,\r\n    \"capacidad\" : 1954,\r\n    \"tamanio\" : 38,\r\n    \"duracionBateria\" : 688.62427\r\n  }, {\r\n    \"@class\" : \"models.Juguete.JugueteElectrico\",\r\n    \"id\" : \"b60dec36-9777-454b-b39d-5e3c1d66cf4e\",\r\n    \"cdp\" : null,\r\n    \"nombre\" : \"Bote de Juguete con Control Remoto\",\r\n    \"stock\" : 90,\r\n    \"precio\" : 351.9989013671875,\r\n    \"marca\" : \"Hasbro\",\r\n    \"modelo\" : \"Robot Transformable\",\r\n    \"edad\" : 14,\r\n    \"categoria\" : \"EDUCATIVO\",\r\n    \"material\" : \"MADERA\",\r\n    \"cantidadDePilas\" : 0,\r\n    \"voltaje\" : 12.0\r\n  }, {\r\n    \"@class\" : \"models.Herramienta.HerramientaElectrica\",\r\n    \"id\" : \"82ddfb86-28ea-4ffb-83b5-25d328757cb9\",\r\n    \"cdp\" : \"codigornd\",\r\n    \"nombre\" : \"Maraca\",\r\n    \"stock\" : 2,\r\n    \"precio\" : 20.0,\r\n    \"marca\" : \"still\",\r\n    \"modelo\" : \"mark1\",\r\n    \"voltaje\" : 220.0,\r\n    \"inalambrico\" : true\r\n  }, {\r\n    \"@class\" : \"models.Herramienta.HerramientaElectrica\",\r\n    \"id\" : \"e3f5831e-8ad7-4eea-ba20-ff72fe9f4073\",\r\n    \"cdp\" : \"codigornd\",\r\n    \"nombre\" : \"wew\",\r\n    \"stock\" : 2,\r\n    \"precio\" : 2.0,\r\n    \"marca\" : \"w\",\r\n    \"modelo\" : \"w\",\r\n    \"voltaje\" : 2.0,\r\n    \"inalambrico\" : false\r\n  } ]\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/productos.json b/productos.json
--- a/productos.json	(revision 592417969ff10c041f6f377141c9480a18eaa378)
+++ b/productos.json	(date 1732484416865)
@@ -1,5 +1,5 @@
 {
-  "nombresProductos" : [ "Cortador de Placas", "Desarmador de Precisión", "Apple Razer Book 13", "Bote de Juguete con Control Remoto", "Maraca", "wew" ],
+  "nombresProductos" : [ "Cortador de Placas", "Desarmador de Precisión", "Apple Razer Book 13", "Bote de Juguete con Control Remoto", "Maraca", "wew", "Destornillador", "Clavo", "Tornillo", "Plato" ],
   "productos" : [ {
     "@class" : "models.Herramienta.HerramientaManual",
     "id" : "7def4d26-475d-4811-beb3-f5a889b5c516",
@@ -74,5 +74,55 @@
     "modelo" : "w",
     "voltaje" : 2.0,
     "inalambrico" : false
+  }, {
+    "@class" : "models.Herramienta.HerramientaManual",
+    "id" : "74b18d9c-36dd-4774-b52b-5d2b7dc5d03b",
+    "cdp" : "codigornd",
+    "nombre" : "Destornillador",
+    "stock" : 2,
+    "precio" : 20.0,
+    "marca" : "Stanley",
+    "modelo" : "pala",
+    "categorias" : "ATORNILLAR"
+  }, {
+    "@class" : "models.Herramienta.Insumo",
+    "id" : "9149b97f-34a4-4593-af49-34fbda00118f",
+    "cdp" : "codigornd",
+    "nombre" : "Clavo",
+    "stock" : 20,
+    "precio" : 2.0,
+    "marca" : "baba",
+    "modelo" : "barba",
+    "tipoDeMaterial" : "CONCRETO",
+    "largo" : 20.0,
+    "ancho" : 2.0,
+    "diametro" : 0.0
+  }, {
+    "@class" : "models.Herramienta.Insumo",
+    "id" : "c6a5066b-8bc0-4a62-9ccc-db4c9e1a3fc0",
+    "cdp" : "codigornd",
+    "nombre" : "Tornillo",
+    "stock" : 100,
+    "precio" : 0.8,
+    "marca" : "Cruz",
+    "modelo" : "caca",
+    "tipoDeMaterial" : "MADERA",
+    "largo" : 1.2,
+    "ancho" : 0.3,
+    "diametro" : 0.0
+  }, {
+    "@class" : "models.Hogar.Bazar",
+    "id" : "5d5c0488-efd7-4307-9a8f-f884ee1df82c",
+    "cdp" : "codigornd",
+    "nombre" : "Plato",
+    "stock" : 20,
+    "precio" : 100.0,
+    "marca" : "Hudson",
+    "modelo" : "platito",
+    "categoria" : "COCINA",
+    "uso" : "COMER",
+    "material" : "Porcelana",
+    "tamanio" : "HONDO",
+    "resistenteAlCalor" : true
   } ]
 }
\ No newline at end of file
